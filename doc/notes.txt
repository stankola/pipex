libraries:

	unistd.h
	read, write (files, streams)
	close (delete a descriptor, ie. close the file)
	access (determine accessibility of file)
	dup, (duplicate open file descriptor)
	dup2 (as above but returns a file descriptor greater than or equal to the third argument)
	execve (execute a file)
	fork (create a new process)
	pipe (create an interprocess channel)
	unlink (remove a directory entry, ie. delete a file)

	sys/wait.h
	wait (waits until any one child process terminates)
	waitpid (waits for a specified process to be stopped or terminated)

	stdlib.h
	malloc, free, exit

	fcntl.h
	open (Returns a file descriptor for a file passed as string)

	stdio.h
	perror (function maps the error number accessed through the symbol errno to 
	   a language-dependent error message)

	string.h
	strerror (function returns a pointer to a string that
       describes the error code passed in the argument errnum)


 < file1 cmd1 | cmd2 > file2

	file1 and file2 are file names.
	cmd1 and cmd2 are shell commands with their parameters

	< redirecting input
	> redirecting output
	| pipe between two commands, ie. redirect output from left command to input of right command
	>> append output
	<< Redirect input until word (ie. << WORD file)

How to do this? -rw-rw-r-- which seems to be default file access for new file with >
	mode_t bits are defined in sys/stat.h which is forbidden.
	Could use literal numbers but that's not good practice.
	Could define _XOPEN_SOURCE to use different standard but that may not be allowed. 
	MacOS might use different standard than Linux?

0 = stdin
1 = stdout
2 = stderr

> = redirect stdout
2> = redirect stderr
2>&1 redirect stderr to stdout

https://jameshfisher.com/2017/02/05/how-do-i-use-execve-in-c/
https://stackoverflow.com/questions/7292642/grabbing-output-from-exec


Test cases:
- Executable file in local directory
- Executable file in path
- Executable file not in path but in different directory
- Output directory missing (should fail)
- Output directory access missing
- Output file missing (should create a new file)
- Output file write access missing
- Input file missing
- Input file read permission missing
- Any command is missing
- Command is in path but different directory
- Command execute rights missing
- Command directory access missing
- Disk space full
* Multiple pipes	(tested manually)
- broken link (Not sure how this should be handled. Execve returns different error than bash)
x Symlinks
x Hard links
x Standard test
x Big (>1MB, enough?) input
x First command hangs for awhile
- filename with space
- filename with illegal characters, such as |

input variations:
	Input file:
		filename
		./filename
		../filename
		/filename
		folder/filename
		/usr/bin/filename


These are apparently all here_doc tests:
Test 1
'here_doc ' '' > cat /dev/random | head -n 5
"here_doc lim "cat /dev/random" "head -n 5" "outfile"

Tests 4, 5 & 6
cat | wc -cl | grep 0 | sort | cat
cat | cat | cat | cat | wc
cat | sort | ls | cat | wc
